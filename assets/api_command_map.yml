'api:system-health-status':
    method: get
    description: 'Return the current system health status.'
'api:accounts:find':
    method: get
    description: 'Returns details about your account.'
'api:accounts:application-has-permission':
    method: get
    description: 'Returns whether your account has access to a specific application permission.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:is-application-admin':
    method: get
    description: 'Returns whether your account is an administrator for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:is-application-owner':
    method: get
    description: 'Returns whether your account is the owner for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:application-mark-recent':
    method: post
    description: 'Marks an application as recently viewed.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:application-star':
    method: post
    description: 'Stars an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:application-unstar':
    method: post
    description: 'Removes an application from the user''s starred list.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
'api:accounts:drush-aliases':
    method: get
    description: 'Returns the drush aliases as a compressed archive download.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
'api:accounts:invites-list':
    method: get
    description: 'Gets a list of all organization admin and team invites that are pending for the current user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:messages-list':
    method: get
    description: 'Returns a list of messages associated with the current user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-organization-admin':
    method: get
    description: 'Returns whether your account is an administrator for an organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-organization-owner':
    method: get
    description: 'Returns whether your account is the owner for an organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:password-check':
    method: post
    description: 'Verifies that the supplied password matches the current user''s password.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:ssh-keys-list':
    method: get
    description: 'Gets a list of SSH keys associated with the current user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:ssh-key-create':
    method: post
    description: 'Installs a new SSH key for the current user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:ssh-key-find':
    method: get
    description: 'Get an SSH key associated with the currently-logged in user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:ssh-key-delete':
    method: delete
    description: 'Deletes an SSH key.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-subscription-admin':
    method: get
    description: 'Returns whether your account is an administrator for a subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-subscription-owner':
    method: get
    description: 'Returns whether your account is the owner for a subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:has-team-permission':
    method: get
    description: 'Returns whether your account has access to a specific team permission.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-team-admin':
    method: get
    description: 'Returns whether your account is an administrator for a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:is-team-owner':
    method: get
    description: 'Returns whether your account is the owner for a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:tokens-list':
    method: get
    description: 'Returns a list of metadata for API access tokens tied to your account.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:token-create':
    method: post
    description: 'Creates an API access token tied to your account.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:token-list':
    method: get
    description: 'Return details about a specific token.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
'api:accounts:token-delete':
    method: delete
    description: 'Revokes an access token.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:agreements:list':
    method: get
    description: 'Return a list of agreements.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:agreements:find':
    method: get
    description: 'Return a specific agreement by a provided UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:agreements:accept':
    method: post
    description: 'Accepts a legal agreement by UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:agreements:decline':
    method: post
    description: 'Declines a legal agreement by UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:agreements:invitees-list':
    method: get
    description: 'Returns a list of users invited to action this agreement.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:list':
    method: get
    description: 'Return a list of applications the current user has access to.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:find':
    method: get
    description: 'Return details about a specific application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:rename':
    method: put
    description: 'Renames an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:artifact-list':
    method: get
    description: 'Return application artifacts.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:artifact-find':
    method: get
    description: 'Return details about a specific artifact.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:vcs-info':
    method: get
    description: 'Return application branches and release tags.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:database-list':
    method: get
    description: 'Returns a list database names for the application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:database-create':
    method: post
    description: 'Creates a database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:database-delete':
    method: delete
    description: 'Drops (deletes) a database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:database-erase':
    method: post
    description: 'Erases (truncates) a database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:ide-list':
    method: get
    description: 'Returns a list of Remote IDEs associated with this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:ide:create':
    method: post
    description: 'Creates a new Remote IDE.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:message-list':
    method: get
    description: 'Returns a list of messages associated with this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:notification-list':
    method: get
    description: 'Returns a list of notifications associated with this application by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:notification-find':
    method: get
    description: 'Returns a single notification.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:permission-list':
    method: get
    description: 'Returns a list of permissions the user has for this application by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:settings-list':
    method: get
    description: 'Returns available settings for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:hosting-settings-list':
    method: get
    description: 'Returns the hosting settings for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:legacy-product-key-find':
    method: get
    description: 'Returns the legacy product keys for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:ra-settings-find':
    method: get
    description: 'Returns the remote administration settings for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:ra-settings-update':
    method: put
    description: 'Modifies the remote administration settings for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:search-settings-find':
    method: get
    description: 'Returns the search settings for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:search-settings-update':
    method: put
    description: 'Modifies the search settings for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:security-settings-find':
    method: get
    description: 'Returns the security policy settings for this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:security-settings-update':
    method: put
    description: 'Modifies the security policy settings for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:tag-list':
    method: get
    description: 'Returns a list of application tags associated with this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:tags-create':
    method: post
    description: 'Creates a new application tag.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:tags-delete':
    method: delete
    description: 'Deletes an application tag.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:task-list':
    method: get
    description: 'Returns a list of tasks associated with this application by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:team-list':
    method: get
    description: 'Returns a list of teams associated with this application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:usage-links':
    method: get
    description: 'Retrieves traversal links for an application''s usage data.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
'api:applications:usage-data':
    method: get
    description: 'Retrieves aggregate usage data for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:usage-data-by-environment':
    method: get
    description: 'Retrieves usage data for an application, broken down by environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:usage-metric-data':
    method: get
    description: 'Retrieves aggregate usage metric data for an application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:usage-views-data-by-environment':
    method: get
    description: 'Retrieves views data for an application, broken down by environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:usage-visits-data-by-environment':
    method: get
    description: 'Retrieves visits data for an application, broken down by environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:distributions:list':
    method: get
    description: 'Return a list of Drupal distributions.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:distributions:find':
    method: get
    description: 'Return details about a specific Drupal distribution.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:environment-list':
    method: get
    description: 'Returns a list of environments within this application by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:environment-create':
    method: post
    description: 'Add a new continuous delivery environment to an application by the application UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:feature-list':
    method: get
    description: 'Return application features.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:applications:insight-data-find':
    method: get
    description: 'Returns Insight data for all sites associated with the application by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:find':
    method: get
    description: 'Return details about a specific environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:update':
    method: put
    description: 'Modifies configuration settings for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:delete':
    method: delete
    description: 'Deletes a CD environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:label-update':
    method: post
    description: 'Change the label for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:resize':
    method: post
    description: 'Resize an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:artifact-deploy':
    method: post
    description: 'Deploys an artifact to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:runtime-list':
    method: get
    description: 'Return a list of runtimes.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:code-deploy':
    method: post
    description: 'Deploys code to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:code-switch':
    method: post
    description: 'Switches code on this environment to a different branch or release tag.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:site-import':
    method: post
    description: 'Imports a site to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-job-list':
    method: get
    description: 'Return environment cron jobs.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-create':
    method: post
    description: 'Creates a scheduled job with cron.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-find':
    method: get
    description: 'Return details about a specific cron job.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-update':
    method: put
    description: 'Modify an existing scheduled job.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-delete':
    method: delete
    description: 'Deletes a cron job.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-enable':
    method: post
    description: 'Enables a cron job.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:cron-disable':
    method: post
    description: 'Disables a cron job.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-list':
    method: get
    description: 'Returns a list of databases.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-copy':
    method: post
    description: 'Copies a database to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-find':
    method: get
    description: 'Return details about a specific database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-php-config-find':
    method: get
    description: 'Returns PHP configuration details for this database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-list':
    method: get
    description: 'Returns a list of backups.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-create':
    method: post
    description: 'Create a backup.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-find':
    method: get
    description: 'Return details about a specific backup.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-delete':
    method: delete
    description: 'Deletes a database backup.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-download':
    method: get
    description: 'Downloads the database backup file.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:database-backup-restore':
    method: post
    description: 'Restores this backup to the appropriate environment''s database.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:dns-find':
    method: get
    description: 'Returns DNS configuration details for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-list':
    method: get
    description: 'Returns a list of domains.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-create':
    method: post
    description: 'Adds a domain to the environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domains-clear-varnish':
    method: post
    description: 'Clears the Varnish cache for one or more domains attached to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-find':
    method: get
    description: 'Return details about a specific domain.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-delete':
    method: delete
    description: 'Removes the domain from this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-clear-varnish':
    method: post
    description: 'Clears the Varnish cache for the specified domain.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-uptime-scan-find':
    method: get
    description: 'Retrieves Uptime scan data for a specific domain.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:domain-status-find':
    method: get
    description: 'Returns details about the domain.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:file-copy':
    method: post
    description: 'Copies files to this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:insight-data-list':
    method: get
    description: 'Returns insight data.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-list':
    method: get
    description: 'Returns a list of log files for this environment available for download.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-download':
    method: get
    description: 'Downloads the log file.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-create':
    method: post
    description: 'Creates a log file snapshot.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:logstream-find':
    method: get
    description: 'Returns a logstream url and metadata.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:livedev-disable':
    method: post
    description: 'Disable Live Development on this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:livedev-enable':
    method: post
    description: 'Enable Live Development on this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-list':
    method: get
    description: 'Returns a collection of log forwarding destinations for this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-create':
    method: post
    description: 'Creates a log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-find':
    method: get
    description: 'Returns the specified log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-update':
    method: put
    description: 'Updates an environment''s log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-delete':
    method: delete
    description: 'Deletes the specified log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-disable':
    method: post
    description: 'Disables the specified log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:log-forwarding-destination-enable':
    method: post
    description: 'Enables the specified log forwarding destination.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:metrics':
    method: get
    description: 'Does not return any data. Allows traversal to metrics groups endpoints.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:stack-metrics-data-list':
    method: get
    description: 'Does not return any data. Allows traversal to StackMetrics endpoints.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:stack-metrics-data-find':
    method: get
    description: 'Returns StackMetrics data for the metrics specified in the filter paramater (e.g., apache-access, web-cpu).'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:stack-metrics-data-metric':
    method: get
    description: 'Returns StackMetrics data for the metric (e.g., apache-access).'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:usage-links':
    method: get
    description: 'Retrieves traversal links for an environment''s usage data.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:usage-data':
    method: get
    description: 'Retrieves usage data for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:usage-metric-data':
    method: get
    description: 'Retrieves usage metric data for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:production-mode-disable':
    method: post
    description: 'Disables production mode for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:production-mode-enable':
    method: post
    description: 'Enables production mode for an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:servers-list':
    method: get
    description: 'Returns a list of servers.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-find':
    method: get
    description: 'Return details about a specific server.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-update':
    method: put
    description: 'Modifies configuration settings for a server.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-reboot':
    method: post
    description: 'Reboots a server.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-relaunch':
    method: post
    description: 'Relaunches a server.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-suspend':
    method: post
    description: 'Suspends a server.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:server-upgrade':
    method: post
    description: 'Upgrades a server from "precise" to "xenial".'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:settings':
    method: get
    description: 'Provides links to environment settings.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:apm-find':
    method: get
    description: 'Return details about a specific APM.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:apm-update':
    method: put
    description: 'Update configuration for an APM tool.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:ssl-settings-find':
    method: get
    description: 'Returns the SSL settings for this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-list':
    method: get
    description: 'Return a list of SSL certificates.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-create':
    method: post
    description: 'Install an SSL certificate.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-find':
    method: get
    description: 'Returns a specific certificate by certificate id.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-delete':
    method: delete
    description: 'Deletes a specific certificate by its ID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-activate':
    method: post
    description: 'Activates an SSL certificate.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:certificate-deactivate':
    method: post
    description: 'Deactivates an active SSL certificate.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:csr-find':
    method: get
    description: 'Returns the certificate signing request for the certificate specified by id.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:csr-create':
    method: post
    description: 'Generates a CSR for one or more domains.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:csr-delete':
    method: delete
    description: 'Deletes the certificate signing request.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:variable-list':
    method: get
    description: 'Returns a list of environment variables associated with this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:variable-create':
    method: post
    description: 'Adds a new environment variable to an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:variable-find':
    method: get
    description: 'Get an environment variable associated with this environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:variable-delete':
    method: delete
    description: 'Removes an environment variable from an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:environments:variable-update':
    method: put
    description: 'Updates an environment variable on an environment.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:ide:find':
    method: get
    description: 'Returns Remote IDE info.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:ide:delete':
    method: delete
    description: 'De-provisions a specific Remote IDE.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:list':
    method: get
    description: 'Returns a list of identity providers for a user.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:find':
    method: get
    description: 'Returns a specific identity provider by UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:update':
    method: put
    description: 'Modifies an identity provider by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:delete':
    method: delete
    description: 'Deletes a specific identity provider by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:enable':
    method: post
    description: 'Enables an identity provider by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:identity-providers:disable':
    method: post
    description: 'Disables an identity provider by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:alert-find':
    method: get
    description: 'Returns insight data for a particular site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:revoke':
    method: post
    description: 'Revokes an Insight install so it can no longer submit data using the Acquia Connector module.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:unrevoke':
    method: post
    description: 'Un-revokes an Insight site so it can once again submit data using the Acquia Connector module. Note that the site must also be unblocked using the Acquia Connector module.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:alert-list':
    method: get
    description: 'Returns a list of Insight alerts for this site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:find':
    method: get
    description: 'Returns a specific Insight alert for this site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:alert-ignore':
    method: post
    description: 'Ignores an alert. An ignored alert will not be counted in the Insight score calculation.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:alert-restore':
    method: post
    description: 'Restores an alert. A restored alert will be included in the calculation of the Insight score.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:connection-history-list':
    method: get
    description: 'Returns a list of historical Insight connections for this site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:drupal-module-list':
    method: get
    description: 'Returns a list of Drupal modules for this site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:insights:score-list':
    method: get
    description: 'Returns a list of historical Insight scores for this site.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:invites:find':
    method: get
    description: 'Returns details about an invitation.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:invites:cancel':
    method: delete
    description: 'Cancels an invitation.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:invites:accept':
    method: post
    description: 'Accepts an invite.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:invites:decline':
    method: post
    description: 'Declines an invite.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:invites:resend':
    method: post
    description: 'Resend an invite.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:messages:dismiss':
    method: post
    description: 'Dismisses a message.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:messages:follow':
    method: get
    description: 'Follows an in-product message link.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:notifications:find':
    method: get
    description: 'Returns a single notification.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:options:list':
    method: get
    description: 'Does not return any data. Allows traversal of options groups endpoints.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:options:cde-sizes-list':
    method: get
    description: 'Displays the various CD Environment size options.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:options:log-forwarding':
    method: get
    description: 'Does not return any data. Allows traversal of options groups endpoints.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:options:log-forwarding-source-list':
    method: get
    description: 'Displays available log forwarding sources.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:options:log-forwarding-consumer-list':
    method: get
    description: 'Displays available log forwarding consumers.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:colors:list':
    method: get
    description: 'Displays the various color options.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:list':
    method: get
    description: 'Return a list of organizations.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:create':
    method: post
    description: 'Creates a new organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:find':
    method: get
    description: 'Return details about a specific organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:update':
    method: put
    description: 'Renames an organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:delete':
    method: delete
    description: 'Deletes a specific organization by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:owner-change':
    method: post
    description: 'Changes the organization owner.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:leave':
    method: post
    description: 'Removes your account from an organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:admin-list':
    method: get
    description: 'Returns a list of organization administrators.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:admin-find':
    method: get
    description: 'Returns the user profile of this organization administrator.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:admin-delete':
    method: delete
    description: 'Removes the user from the list of administrators for the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
'api:organizations:admin-invite-list':
    method: get
    description: 'Gets a list of invitations of administrators for this organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:admin-invite-create':
    method: post
    description: 'Invites a user to be an administrator in this organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:applications-list':
    method: get
    description: 'Returns a list of applications that belong to the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:available-tags-list':
    method: get
    description: 'Returns a list of all available application tags.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:available-tags-create':
    method: post
    description: 'Adds bulk tags to organization resources.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:available-tags-delete':
    method: delete
    description: 'Deletes bulk tags from organization resources.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:identity-provider-find':
    method: get
    description: 'Returns an identity provider for an organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:members-list':
    method: get
    description: 'Returns a list of all organization members.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:member-find':
    method: get
    description: 'Returns the user profile of this organization member.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:member-delete':
    method: delete
    description: 'Removes the member from the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:member-application-list':
    method: get
    description: 'Returns a list of applications that an organization member has access to.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:roles-list':
    method: get
    description: 'Returns a list of all the canonical roles within the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:role-create':
    method: post
    description: 'Creates a role.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:subscriptions-list':
    method: get
    description: 'Returns a list of subscriptions that belong to the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:team-invite-list':
    method: get
    description: 'Gets a list of member invitations for all teams in this organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:team-list':
    method: get
    description: 'Returns a list of teams associated with the organization.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:organizations:team-create':
    method: post
    description: 'Creates a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:permissions:list':
    method: get
    description: 'Return a list of permissions.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:role-find':
    method: get
    description: 'Return details about a specific role.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:roles-delete':
    method: delete
    description: 'Deletes a specific role by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:role-update':
    method: put
    description: 'Updates a role.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:list':
    method: get
    description: 'Return a list of subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:find':
    method: get
    description: 'Return details about a specific subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:update':
    method: put
    description: 'Modifies a subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:application-list':
    method: get
    description: 'Provides a list of applications that are a part of the subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:entitlements-list':
    method: get
    description: 'Provides a list of entitlements that are a part of the subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:ide-list':
    method: get
    description: 'Returns a list of Remote IDEs associated with this subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-links':
    method: get
    description: 'Retrieves traversal links for a subscription''s usage data.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-data':
    method: get
    description: 'Retrieves aggregate usage data for a subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-data-by-application':
    method: get
    description: 'Retrieves usage data for a subscription, broken down by application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-metric-data':
    method: get
    description: 'Retrieves aggregate usage metric data for a subscription.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-views-data-by-application':
    method: get
    description: 'Retrieves views data for a subscription, broken down by application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:usage-visits-data-by-application':
    method: get
    description: 'Retrieves visits data for a subscription, broken down by application.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-list':
    method: get
    description: 'Provides a list of Shield ACL rules.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-create':
    method: post
    description: 'Creates a Shield ACL rule.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-find':
    method: get
    description: 'Returns the specified Shield ACL rule.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-update':
    method: put
    description: 'Updates a Shield ACL rule.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-delete':
    method: delete
    description: 'Deletes a Shield ACL rule.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:subscriptions:shield-acl-reset':
    method: post
    description: 'Resets Shield ACL rules to default settings.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:teams-list':
    method: get
    description: 'Return teams the current user has access to.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-find':
    method: get
    description: 'Return details about a specific team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-update':
    method: put
    description: 'Change the name of a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-delete':
    method: delete
    description: 'Deletes a specific team by its UUID.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:user-leave':
    method: post
    description: 'Removes the current user from a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-application-list':
    method: get
    description: 'Returns a list of applications this team has access to.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-application-add':
    method: post
    description: 'Adds an application to this team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-application-remove':
    method: delete
    description: 'Removes the application from this team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-invite-list':
    method: get
    description: 'Returns a list of invitations to this team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-user-invite':
    method: post
    description: 'Invites a user to join a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-member-list':
    method: get
    description: 'Returns a list of team members.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-member-add':
    method: put
    description: 'Grant team roles to a member.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
'api:tps:team-member-remove':
    method: delete
    description: 'Remove a user from a team.'
    arguments:
        ApplicationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Permission: { description: 'Specifies the permission you wish to check access for.', required: true }
        DrushVersion: { description: 'Specifies the drush aliases formatting, either 8 (example.aliases.drushrc.php) or 9 (example.site.yaml)', required: true }
        OrganizationUuid: { description: 'The organization entity''s universally unique identifier.', required: true }
        SshKeyUuid: { description: 'The SSH key entity''s universally unique identifier.', required: true }
        SubscriptionUuid: { description: 'The subscription entity''s universally unique identifier.', required: true }
        TeamUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TokenUuid: { description: 'The token entity''s universally unique identifier.', required: true }
        AgreementUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ArtifactId: { description: 'An ID that uniquely identifies an artifact.', required: true }
        Name: { description: 'A name that uniquely identifies an entity.', required: true }
        NotificationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        TagName: { description: 'The name of the application tag.', required: true }
        UsageMetric: { description: 'A usage data metric type.', required: true }
        EnvironmentId: { description: 'The environment identifier. The identifier is a compound key consisting of the internal database ID of the environment and the application UUID.', required: true }
        CronId: { description: 'An ID that uniquely identifies a cron job.', required: true }
        DatabaseName: { description: 'The database name, typically lower snake case.', required: true }
        BackupId: { description: 'The database backup identifier.', required: true }
        Domain: { description: 'A domain name.', required: true }
        LogType: { description: 'An ID that uniquely identifies a log type.', required: true }
        LogForwardingDestinationUuid: { description: 'The entity''s universally unique identifier.', required: true }
        StackMetricsMetricTypes: { description: 'Specifies the types of StackMetrics metric to retrieve.', required: true }
        StackMetricsMetricType: { description: 'Specifies the type of StackMetrics metric to retrieve.', required: true }
        ServerType: { description: 'Specifies the type of server metric to retrieve.', required: true }
        ServerId: { description: 'The internal database identifier of the server.', required: true }
        CertificateId: { description: 'An ID that uniquely identifies a certificate.', required: true }
        EnvironmentVariableName: { description: 'The environment variable name.', required: true }
        IdeUuid: { description: 'The Remote IDE universally unique identifier.', required: true }
        IdentityProviderUuid: { description: 'The entity''s universally unique identifier.', required: true }
        SiteId: { description: 'The site id', required: true }
        AlertUuid: { description: 'The entity''s universally unique identifier.', required: true }
        Token: { description: 'The token identifier.', required: true }
        MessageUuid: { description: 'The entity''s universally unique identifier.', required: true }
        UserUuid: { description: 'The entity''s universally unique identifier.', required: true }
        RoleUuid: { description: 'The entity''s universally unique identifier.', required: true }
        ShieldAclUuid: { description: 'The entity''s universally unique identifier.', required: true }
    options:
        From: { description: 'Specifies relative or absolute time period to retrieve results from. (Default value -7d)', required: false }
        To: { description: 'Optionally specifies relative or absolute time period to retrieve results until.', required: false }
        Sort: { description: "A comma-delimited string with fields used for sorting. The order of the fields is significant. A leading - in the field indicates the field should be sorted in a descending order. Not all fields are sortable.\n", required: false }
        Filter: { description: "The filters query string parameter restricts the data returned from your request. Filtered queries restrict the rows that do (or do not) get included in the result by testing each row in the result against the filters. Not all fields are filterable.\n\nThere are eight filter operators that can be used and they must be URL encoded in order to be included. The operators are:\n\n* Equals: `= (%3D)`\n* Does not equal: `!= (!%3D)`\n* Greater than: `> (%3E)`\n* Less than: `< (%3C)`\n* Greater than or equal to: `>= (%3E%3D)`\n* Less than or equal to: `<= (%3C%3D)`\n* Contains substring: `=@ (%3D@)`\n* Does not contain substring: `!@ (!@)`\n\nFilters can be combined using `OR` and `AND` boolean logic. The `OR` operator is defined using a comma (`,`) and the `AND` operator is defined using a semi-colon (`;`).\n\nSome examples:\n* `filter=field%3Dvalue` (`field` equals `'value'`)\n* `filter=field%3D@*partialmatch` (`field` ends with `'partialmatch'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue` (`field` ends with `'partialmatch'` OR `field` equals `'value'`)\n* `filter=field%3D@*partialmatch,field%3Dvalue;field2%3C5` (`field` ends with `'partialmatch'` OR `field` equals `'value'` AND `field2` > `5`)\n", required: false }
        Limit: { description: 'The maximum number of items to return.', required: false }
        Offset: { description: 'An integer to signify the offset to paginate from.', required: false }
        TokenDeleteReason: { description: 'Specifies the reason for the token revocation for future reference.', required: false }
        Resolution: { description: "Specifies the data granularity for the request. Resolution for is limited to six months for a \"day\" resolution, one\nyear for a \"week\" resolution, and three years for a \"month\" resolution.\n", required: false }
        Range: { description: 'ISO-8601 date/time of invite create date/time.', required: false }
