<?php

namespace Acquia\Ads\Tests\Commands\Ide\Wizard;

use Acquia\Ads\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand;
use AcquiaCloudApi\Connector\Client;
use AcquiaCloudApi\Response\IdeResponse;
use Prophecy\Argument;
use Psr\Http\Message\ResponseInterface;
use Symfony\Component\Console\Command\Command;

/**
 * Class IdeWizardCreateSshKeyCommandTest.
 *
 * @property \Acquia\Ads\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand $command
 * @package Acquia\Ads\Tests\Ide
 */
class IdeWizardCreateSshKeyCommandTest extends IdeWizardTestBase {

  /**
   * Tests the 'ide:wizard:ssh-key:create' command.
   *
   * @throws \Psr\Cache\InvalidArgumentException
   */
  public function testCreate(): void {

    /** @var \Prophecy\Prophecy\ObjectProphecy|Client $cloud_client */
    $cloud_client = $this->prophet->prophesize(Client::class);

    // Request for list of SSH keys in Cloud.
    $mock_body = $this->getMockResponseFromSpec('/account/ssh-keys', 'get', '200');
    $cloud_client->request('get', '/account/ssh-keys')->willReturn($mock_body->{'_embedded'}->items)->shouldBeCalled();

    // Request for IDE data.
    $ide_response = $this->getMockResponseFromSpec('/ides/{ideUuid}', 'get', '200');
    $cloud_client->request('get', '/ides/' . $this->remote_ide_uuid)->willReturn($ide_response)->shouldBeCalled();

    // Request for Environments data. This isn't actually the endpoint we should
    // be using, but we do it due to CXAPI-7209.
    $response = $this->getMockResponseFromSpec('/environments/{environmentId}', 'get', '200');
    // This is a bug in the spec.
    $cloud_client->request('get', "/applications/{$this->application_uuid}/environments")->willReturn([$response])->shouldBeCalled();

    // Request to upload new SSH key.
    // We create a unique label based on the IDE, not the stock label from the
    // yaml spec example.
    $ide = new IdeResponse((object) $ide_response);
    $options = [
      'form_params' => [
        'label' => $this->command->getIdeSshKeyLabel($ide),
        // We don't know what this will be since it's generated by the
        // ssh-key:create command.
        'public_key' => Argument::type('string')
      ]
    ];
    $response = $this->prophet->prophesize(ResponseInterface::class);
    $response->getStatusCode()->willReturn(202);
    $cloud_client->makeRequest('post', '/account/ssh-keys', Argument::type('array'))->willReturn($response->reveal())->shouldBeCalled();

    // Choose a local SSH key to upload to Acquia Cloud.
    $ssh_key_filename = $this->command->getSshKeyFilename($this->remote_ide_uuid);
    $this->command->getApplication()->setSshKeysDir(sys_get_temp_dir());
    $this->command->getApplication()->setAcquiaCloudClient($cloud_client->reveal());
    $this->executeCommand([
      '--no-wait' => '',
    ]);
    $this->prophet->checkPredictions();

    $this->assertFileExists($this->command->getApplication()->getSshKeysDir() . '/' . $ssh_key_filename);
    $this->assertFileExists($this->command->getApplication()->getSshKeysDir() . '/' . str_replace('.pub', '', $ssh_key_filename));
  }

  /**
   * @return \Acquia\Ads\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand
   */
  protected function createCommand(): Command {
    return new IdeWizardCreateSshKeyCommand();
  }

  // Test can only be run inside IDE.
}
